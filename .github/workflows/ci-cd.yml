name: NestJS Monorepo CI/CD

on:
  push:
    branches:
      - master # Trigger deployment on push to master
      - develop # Trigger CI on push to develop
  pull_request:
    branches:
      - master # Trigger CI on PRs targeting master
      - develop # Trigger CI on PRs targeting develop

jobs:
  # ==================
  # == CI Pipeline ===
  # ==================
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm run test

      - name: Build Applications
        run: npm run build

  # =====================
  # == CD Pipeline ======
  # =====================
  deploy-to-vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Docker Build Setup ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Build and Save Docker Images ---
      - name: Build and Save api-gateway Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api-gateway/Dockerfile
          platforms: linux/amd64
          push: false
          tags: nest-api-gateway:latest
          outputs: type=docker,dest=./api-gateway.tar # Save directly to workspace
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Save todo-service Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/todo-service/Dockerfile
          platforms: linux/amd64
          push: false
          tags: nest-todo-service:latest
          outputs: type=docker,dest=./todo-service.tar # Save directly to workspace
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Prepare Environment ---
      - name: Prepare Server .env File
        run: echo "${{ secrets.SERVER_ENV_FILE }}" > .env

      # --- Debug Step to Verify Files ---
      - name: Debug Files
        run: |
          echo "Files in current directory:"
          ls -la

      # --- First ensure target directory exists on the server ---
      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.VPS_SSH_USER }}/app/nest-microservices

      # --- Copy Files to VPS ---
      - name: Copy API Gateway Image
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: 'api-gateway.tar'
          target: '/home/${{ secrets.VPS_SSH_USER }}/app/nest-microservices/'
          overwrite: true

      - name: Copy Todo Service Image
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: 'todo-service.tar'
          target: '/home/${{ secrets.VPS_SSH_USER }}/app/nest-microservices/'
          overwrite: true

      - name: Copy Deployment Configuration
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: 'docker-compose.deploy.yml,.env'
          target: '/home/${{ secrets.VPS_SSH_USER }}/app/nest-microservices/'
          overwrite: true

      # --- Deploy Application ---
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Define deployment directory on the server
            DEPLOY_DIR=/home/${{ secrets.VPS_SSH_USER }}/app/nest-microservices
            cd $DEPLOY_DIR

            # List directory contents to verify files
            echo "Verifying files in deployment directory:"
            ls -la

            echo "Loading Docker images..."
            docker load -i api-gateway.tar || { echo "Failed to load api-gateway image"; exit 1; }
            docker load -i todo-service.tar || { echo "Failed to load todo-service image"; exit 1; }

            echo "Removing temporary tar files..."
            rm api-gateway.tar todo-service.tar

            echo "Starting deployment with Docker Compose..."
            # Pull latest base images if needed
            docker compose -f docker-compose.deploy.yml pull postgres nats

            # Start new containers based on the loaded images and compose file
            docker compose -f docker-compose.deploy.yml up -d --remove-orphans

            echo "Waiting for services to start..."
            sleep 15

            # Check if containers are running
            docker compose -f docker-compose.deploy.yml ps

            echo "Running Prisma migrations..."
            # Execute migrations inside the running todo-service container
            docker compose -f docker-compose.deploy.yml exec -T todo-service npx prisma migrate deploy || { echo "Migration failed"; }

            echo "Deployment completed!"

            # Clean up unused docker images
            echo "Cleaning up dangling Docker images..."
            docker image prune -f
